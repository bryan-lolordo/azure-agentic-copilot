# Azure Copilot Project Overview

## Architecture & Folder Structure

```
azure_copilot/
│
├── app/
│   ├── __init__.py
│   ├── main.py                 # Main FastAPI app
│   ├── agents/
│   │   ├── __init__.py
│   │   ├── supervisor_agent.py
│   │   ├── retrieval_agent.py
│   │   ├── report_agent.py
│   │   └── automation_agent.py
│   └── tools/
│       ├── __init__.py
│       ├── azure_search_tool.py
│       ├── power_automate_tool.py
│       └── data_loader.py
│
├── prompts/
│   ├── supervisor_prompt.txt
│   ├── retrieval_prompt.txt
│   ├── report_prompt.txt
│   └── automation_prompt.txt
│
├── config/
│   ├── settings.yaml
│   └── ai_search_index.json
│
├── requirements.txt
├── .env
├── README.md
├── architecture.png
├── create_index.py
├── test_search_connection.py
├── upload_docs.py
├── retrieval_test.py
├── test_supervisor_agent.py
└── PROJECT_OVERVIEW.txt
```

## Project Purpose
This project implements an agentic workflow on Azure, using multiple agents to process user queries, retrieve and summarize data, and automate actions via Power Automate. It leverages Azure OpenAI, Azure AI Search, and other Azure services.


## Full Setup Instructions (Azure + Local)

### 1. Provision Azure Resources
**a. Azure OpenAI**
   1. Go to https://portal.azure.com and search for "Azure OpenAI".
   2. Click "Create" and fill out the form (subscription, region, resource group, name, etc.).
   3. After creation, go to your resource and click "Model Deployments".
   4. Click "+ Create Deployment" and deploy:
      - `gpt-4o-mini` (for chat/completions)
      - `text-embedding-3-small` (for embeddings)
      - (If using AI Foundry, you can deploy models there as well.)

**b. Azure AI Search**
   1. In Azure Portal, search for "Azure AI Search" and click "Create".
   2. Fill out the form (subscription, region, resource group, name, etc.).
   3. After creation, go to your resource and click "Keys" in the left menu.
   4. Copy Admin key 1 and the endpoint (from "Overview").

### 2. Gather Keys and Endpoints
   - In your Azure OpenAI resource, click "Keys and Endpoint" in the left menu.
   - Copy:
      - Endpoint (e.g., https://openai-ld.openai.azure.com/)
      - API Key (save securely)
      - API Version (e.g., 2024-05-01-preview)
   - In your Azure AI Search resource, copy the endpoint and Admin key 1.

### 3. Local Project Setup
   1. Clone or create the project folder structure (see Architecture & Folder Structure below).
   2. Open a terminal in the project root.
   3. Create a Python virtual environment:
      - `python -m venv .venv`
      - Activate it: `.venv\Scripts\Activate` (Windows) or `source .venv/bin/activate` (Mac/Linux)
   4. Install dependencies:
      - `pip install -r azure-copilot/requirements.txt`
   5. Create a `.env` file in the project root with:
      - AZURE_OPENAI_API_KEY
      - AZURE_OPENAI_ENDPOINT
      - AZURE_OPENAI_API_VERSION
      - AZURE_SEARCH_ENDPOINT
      - AZURE_SEARCH_KEY
      - AZURE_SEARCH_INDEX

### 4. Create and Populate Search Index
   1. Run `python azure-copilot/create_index.py` to create the `knowledge-index` in Azure AI Search.
   2. Run `python azure-copilot/upload_docs.py` to upload sample documents (with embeddings).
   3. Verify in Azure Portal: Azure AI Search → Indexes → knowledge-index → Search explorer.

### 5. Test Retrieval and Agents
   1. Run `python azure-copilot/retrieval_test.py` to test document retrieval.
   2. Implement and test agents in `app/agents/` (RetrievalAgent, SupervisorAgent, etc.).
   3. Add and run test scripts (e.g., `python azure-copilot/test_supervisor_agent.py`).

### 6. (Optional) Use Azure AI Foundry
   1. Go to https://ai.azure.com and sign in.
   2. In "Connections", add your Azure OpenAI and Search resources.
   3. Create agents visually (RetrievalAgent, SupervisorAgent, etc.).
   4. Configure prompts, data sources, and settings as needed.
   5. Test agents in the Foundry UI.

### 7. Continue Implementation & Integration
After creating the agents in Azure AI Foundry, continue with the following steps:
   1. **Create report_agent.py** — For summarizing and formatting data.  
      Path: azure-copilot/app/agents/report_agent.py
   2. **Create automation_agent.py** — For Power Automate and workflow actions.  
      Path: azure-copilot/app/agents/automation_agent.py
   3. **Update supervisor_agent.py** — Connect and orchestrate the new agents, mirroring your Azure Foundry setup.
   4. **Add FastAPI main.py** — Expose your SupervisorAgent via a `/query` endpoint for easy integration and testing.
   5. **Make Cloud-Ready for Azure App Service** — Prepare your app for deployment (requirements.txt, web server config, etc.).
   6. **Integrate with Microsoft Teams** — Use a webhook, Bot Framework, or Copilot Studio for enterprise chat workflows.
   7. **Microsoft 365 Copilot Plugin Integration** — Plan how to connect your workflow as a plugin for Microsoft 365 Copilot.

### 8. Version Control
   1. Create a `.gitignore` (Python template, exclude .env, .venv, etc.).
   2. Initialize git: `git init`
   3. Add files: `git add .`
   4. Commit: `git commit -m "Initial commit"`
   5. Create a new repo on GitHub and add as remote:
      - `git remote add origin https://github.com/your-username/azure-agentic-copilot.git`
   6. Push: `git push -u origin main`
   7. Use GitHub for collaboration, code review, and backup.

---
