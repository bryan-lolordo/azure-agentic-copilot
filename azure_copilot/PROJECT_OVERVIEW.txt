# Azure Copilot Project Overview

## Architecture & Folder Structure

```
azure_copilot/
│
├── app/
│   ├── __init__.py
│   ├── main.py                 # Main FastAPI app
│   ├── agents/
│   │   ├── __init__.py
│   │   ├── supervisor_agent.py
│   │   ├── retrieval_agent.py
│   │   ├── report_agent.py
│   │   └── automation_agent.py
│   └── tools/
│       ├── __init__.py
│       ├── azure_search_tool.py
│       ├── power_automate_tool.py
│       └── data_loader.py
│
├── prompts/
│   ├── supervisor_prompt.txt
│   ├── retrieval_prompt.txt
│   ├── report_prompt.txt
│   └── automation_prompt.txt
│
├── config/
│   ├── settings.yaml
│   └── ai_search_index.json
│
├── requirements.txt
├── .env
├── README.md
├── architecture.png
├── create_index.py
├── test_search_connection.py
├── upload_docs.py
├── retrieval_test.py
├── test_supervisor_agent.py
└── PROJECT_OVERVIEW.txt
```

## Project Purpose
This project implements an agentic workflow on Azure, using multiple agents to process user queries, retrieve and summarize data, and automate actions via Power Automate. It leverages Azure OpenAI, Azure AI Search, and other Azure services.


## Full Setup Instructions (Azure + Local)

### 1. Provision Azure Resources
**a. Azure OpenAI**
   1. Go to https://portal.azure.com and search for "Azure OpenAI".
   2. Click "Create" and fill out the form (subscription, region, resource group, name, etc.).
   3. After creation, go to your resource and click "Model Deployments".
   4. Click "+ Create Deployment" and deploy:
      - `gpt-4o-mini` (for chat/completions)
      - `text-embedding-3-small` (for embeddings)
      - (If using AI Foundry, you can deploy models there as well.)

**b. Azure AI Search**
   1. In Azure Portal, search for "Azure AI Search" and click "Create".
   2. Fill out the form (subscription, region, resource group, name, etc.).
   3. After creation, go to your resource and click "Keys" in the left menu.
   4. Copy Admin key 1 and the endpoint (from "Overview").

### 2. Gather Keys and Endpoints
   - In your Azure OpenAI resource, click "Keys and Endpoint" in the left menu.
   - Copy:
      - Endpoint (e.g., https://openai-ld.openai.azure.com/)
      - API Key (save securely)
      - API Version (e.g., 2024-05-01-preview)
   - In your Azure AI Search resource, copy the endpoint and Admin key 1.

### 3. Local Project Setup
   1. Clone or create the project folder structure (see Architecture & Folder Structure below).
   2. Open a terminal in the project root.
   3. Create a Python virtual environment:
      - `python -m venv .venv`
      - Activate it: `.venv\Scripts\Activate` (Windows) or `source .venv/bin/activate` (Mac/Linux)
   4. Install dependencies:
      - `pip install -r azure-copilot/requirements.txt`
   5. Create a `.env` file in the project root with:
      - AZURE_OPENAI_API_KEY
      - AZURE_OPENAI_ENDPOINT
      - AZURE_OPENAI_API_VERSION
      - AZURE_SEARCH_ENDPOINT
      - AZURE_SEARCH_KEY
      - AZURE_SEARCH_INDEX

### 4. Create and Populate Search Index
   1. Run `python azure-copilot/create_index.py` to create the `knowledge-index` in Azure AI Search.
   2. Run `python azure-copilot/upload_docs.py` to upload sample documents (with embeddings).
   3. Verify in Azure Portal: Azure AI Search → Indexes → knowledge-index → Search explorer.

### 5. Test Retrieval and Agents
   1. Run `python azure-copilot/retrieval_test.py` to test document retrieval.
   2. Implement and test agents in `app/agents/` (RetrievalAgent, SupervisorAgent, etc.).
   3. Add and run test scripts (e.g., `python azure-copilot/test_supervisor_agent.py`).

### 6. (Optional) Use Azure AI Foundry
   1. Go to https://ai.azure.com and sign in.
   2. In "Connections", add your Azure OpenAI and Search resources.
   3. Create agents visually (RetrievalAgent, SupervisorAgent, etc.).
   4. Configure prompts, data sources, and settings as needed.
   5. Test agents in the Foundry UI.

### 7. Continue Implementation & Integration
After creating the agents in Azure AI Foundry, continue with the following steps:
   1. **Create report_agent.py** — For summarizing and formatting data.  
      Path: azure-copilot/app/agents/report_agent.py
   2. **Create automation_agent.py** — For Power Automate and workflow actions.  
      Path: azure-copilot/app/agents/automation_agent.py
   3. **Update supervisor_agent.py** — Connect and orchestrate the new agents, mirroring your Azure Foundry setup.
   4. **Add FastAPI main.py** — Expose your SupervisorAgent via a `/query` endpoint for easy integration and testing.
   5. **Make Cloud-Ready for Azure App Service** — Prepare your app for deployment (requirements.txt, web server config, etc.).
   6. **Integrate with Microsoft Teams** — Use a webhook, Bot Framework, or Copilot Studio for enterprise chat workflows.
   7. **Microsoft 365 Copilot Plugin Integration** — Plan how to connect your workflow as a plugin for Microsoft 365 Copilot.




### 8. Deployment to Azure
   1. Open a terminal in your project root (`azure_copilot`).
   2. Ensure your virtual environment is activated and all requirements are installed.
   3. Run the following command to deploy to Azure App Service:
      - `az webapp up --runtime "PYTHON:3.10" --sku B1 --name ld-ai-copilot --resource-group ld-copilot`
   4. Wait for the deployment to complete. The app will be available at:
      - https://ld-ai-copilot.azurewebsites.net
   5. In the Azure Portal, navigate to your App Service and go to Configuration → Application Settings.
   6. Migrate all key-value pairs from your local `.env` file into Application Settings for secure access by your app.
   7. (Optional) Set your startup command if needed (e.g., `gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app`).


### 9. FastAPI Setup & Endpoint Testing
   1. In `app/main.py`, set up your FastAPI app and include endpoints for all agents:
      - `/query` for SupervisorAgent
      - Additional endpoints for RetrievalAgent, ReportAgent, AutomationAgent as needed
   2. Test each endpoint locally:
      - Start the app: `python -m uvicorn app.main:app --host=0.0.0.0 --port=8000`
      - Use curl, Postman, or a browser to send requests to each endpoint
      - Confirm each agent responds as expected
   3. After deployment, repeat the tests using the Azure App Service URL to ensure endpoints work in production.


### 10. Post-Deployment Validation
   1. Open your deployed app in a browser: https://ld-ai-copilot.azurewebsites.net
   2. Use API tools (curl, Postman) to test all endpoints and verify correct responses.
   3. In Azure Portal, check App Service → Log Stream for any errors or startup issues.
   4. Confirm that environment variables are loaded and the app starts without errors.
   5. Monitor for successful requests and correct agent behavior.



### 11. Connect to Teams via Power Automate
   1. In Power Automate (https://make.powerautomate.com), click **Create** > **Automated cloud flow**.
   2. Choose the **Microsoft Teams** trigger (e.g., "When a new message is posted to a channel").
   3. Add a new step: **HTTP** action.
      - Method: POST
      - URI: `https://ld-ai-copilot.azurewebsites.net/query`
      - Headers: `Content-Type: application/json`
      - Body: Pass the Teams message text as JSON (e.g., `{ "query": <Teams message text> }`)
   4. Add a step to **Post a message** back to Teams with the response from your API.
   5. Save and test the flow by posting a message in Teams.
   6. Adjust authentication as needed (API key, AAD, etc.) for production security.

### 12. Integrate with Microsoft Copilot Studio
   1. Go to Microsoft Copilot Studio (https://copilotstudio.microsoft.com/).
   2. Create a new Copilot or open an existing one.
   3. In the Copilot designer, add a new **Plugin** or **Custom Action**.
   4. Register your `/query` endpoint:
      - URL: `https://ld-ai-copilot.azurewebsites.net/query`
      - Method: POST
      - Define the request/response schema (e.g., input: `query` string, output: response text).
   5. Map Copilot user input to the API request body.
   6. Use the API response in Copilot's reply to the user.
   7. Test the integration in Teams or M365 Copilot chat.

### 13. Add Application Insights
   1. In Azure Portal, go to your App Service resource.
   2. In the left menu, select **Application Insights** and click **Turn on Application Insights**.
   3. Create a new Application Insights resource or link an existing one.
   4. Restart your App Service to enable telemetry.
   5. In your FastAPI app, install the SDK:
      - `pip install opencensus-ext-azure`
   6. Add the following to your `main.py` to send logs and traces:
      ```python
      from opencensus.ext.azure.log_exporter import AzureLogHandler
      import logging
      logger = logging.getLogger(__name__)
      logger.addHandler(AzureLogHandler(connection_string="<YOUR_APP_INSIGHTS_CONNECTION_STRING>"))
      ```
   7. View requests, traces, and errors in the Application Insights dashboard.
