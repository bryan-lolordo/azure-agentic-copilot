# Azure Copilot Project Overview

## Architecture & Folder Structure

```
azure-copilot/
│
├── app/
│   ├── main.py                 # Main FastAPI or Flask app
│   ├── agents/
│   │   ├── supervisor_agent.py
│   │   ├── retrieval_agent.py
│   │   ├── report_agent.py
│   │   └── automation_agent.py
│   └── tools/
│       ├── azure_search_tool.py
│       ├── power_automate_tool.py
│       └── data_loader.py
│
├── prompts/
│   ├── supervisor_prompt.txt
│   ├── retrieval_prompt.txt
│   ├── report_prompt.txt
│   └── automation_prompt.txt
│
├── config/
│   ├── settings.yaml
│   └── ai_search_index.json
│
├── requirements.txt
├── .env
├── README.md
├── architecture.png
├── create_index.py
├── test_search_connection.py
└── PROJECT_OVERVIEW.txt
```

## Project Purpose
This project implements an agentic workflow on Azure, using multiple agents to process user queries, retrieve and summarize data, and automate actions via Power Automate. It leverages Azure OpenAI, Azure AI Search, and other Azure services.

## Step-by-Step Process

1. **Project Initialization**
   - Created the folder structure for modularity and clarity.
   - Added placeholder files for agents, tools, prompts, and configuration.
   - Set up a Python virtual environment and installed all required dependencies.

2. **Environment Configuration**
   - Created a `.env` file to securely store API keys, endpoints, and configuration values for Azure OpenAI, Azure Search, and Power Automate.

3. **Azure Search Resource Connection**
   - Wrote and ran `test_search_connection.py` to verify connectivity to the Azure Search resource using the endpoint and key from `.env`.

4. **Index Creation**
   - Developed `create_index.py` to define and create a vector-enabled search index in Azure Search, specifying fields for id, content, category, and embedding.
   - Ensured the embedding field is properly configured for vector search (dimensions and configuration).

5. **Agentic Workflow Design**
   - The `app/agents/` folder contains modular agent scripts:
     - `supervisor_agent.py`: Orchestrates the workflow.
     - `retrieval_agent.py`: Handles data retrieval from Azure AI Search.
     - `report_agent.py`: Summarizes and formats data.
     - `automation_agent.py`: Triggers Power Automate flows for actions like email, Excel, or SharePoint updates.
   - Prompts for each agent are stored in the `prompts/` folder for easy iteration and tuning.

6. **Tools Integration**
   - The `app/tools/` folder contains reusable modules for Azure Search, Power Automate, and data loading.


7. **Version Control & Collaboration**
   - Created a `.gitignore` file to exclude sensitive and unnecessary files (like `.env` and `.venv`) from version control.
   - Initialized a local Git repository and connected it to the remote GitHub repository: `azure-agentic-copilot`.
   - Made the first commit and pushed all project files to GitHub for versioning and collaboration.

8. **Testing and Iteration**
   - Added and ran `test_supervisor_agent.py` to begin validating agent logic and workflow integration.
   - Continued to iterate on agent and tool scripts, updating the project as needed.



## Full Setup Instructions (Azure + Local)

### 1. Create Azure OpenAI Resource
1. Go to https://portal.azure.com and search for "Azure OpenAI".
2. Click "Create" and fill out the form (subscription, region, resource group, name, etc.).
3. After creation, go to your resource and click "Model Deployments".
4. Click "+ Create Deployment" and deploy:
   - `gpt-4o-mini` (for chat/completions)
   - `text-embedding-3-small` (for embeddings)
   - (If using AI Foundry, you can deploy models there as well.)

### 2. Get Keys and Endpoint
1. In your Azure OpenAI resource, click "Keys and Endpoint" in the left menu.
2. Copy:
   - Endpoint (e.g., https://openai-ld.openai.azure.com/)
   - API Key (save securely)
   - API Version (e.g., 2024-05-01-preview)

### 3. Create Azure AI Search Resource
1. In Azure Portal, search for "Azure AI Search" and click "Create".
2. Fill out the form (subscription, region, resource group, name, etc.).
3. After creation, go to your resource and click "Keys" in the left menu.
4. Copy Admin key 1 and the endpoint (from "Overview").

### 4. Local Project Setup
1. Clone or create the project folder structure (see Architecture & Folder Structure below).
2. Open a terminal in the project root.
3. Create a Python virtual environment:
   - `python -m venv .venv`
   - Activate it: `.venv\Scripts\Activate` (Windows) or `source .venv/bin/activate` (Mac/Linux)
4. Install dependencies:
   - `pip install -r azure-copilot/requirements.txt`
5. Create a `.env` file in the project root with:
   - AZURE_OPENAI_API_KEY
   - AZURE_OPENAI_ENDPOINT
   - AZURE_OPENAI_API_VERSION
   - AZURE_SEARCH_ENDPOINT
   - AZURE_SEARCH_KEY
   - AZURE_SEARCH_INDEX

### 5. Create and Populate Search Index
1. Run `python azure-copilot/create_index.py` to create the `knowledge-index` in Azure AI Search.
2. Run `python azure-copilot/upload_docs.py` to upload sample documents (with embeddings).
3. Verify in Azure Portal: Azure AI Search → Indexes → knowledge-index → Search explorer.

### 6. Test Retrieval and Agents
1. Run `python azure-copilot/retrieval_test.py` to test document retrieval.
2. Implement and test agents in `app/agents/` (RetrievalAgent, SupervisorAgent, etc.).
3. Add and run test scripts (e.g., `python azure-copilot/test_supervisor_agent.py`).

### 7. (Optional) Use Azure AI Foundry
1. Go to https://ai.azure.com and sign in.
2. In "Connections", add your Azure OpenAI and Search resources.
3. Create agents visually (RetrievalAgent, SupervisorAgent, etc.).
4. Configure prompts, data sources, and settings as needed.
5. Test agents in the Foundry UI.

### 8. Version Control
1. Create a `.gitignore` (Python template, exclude .env, .venv, etc.).
2. Initialize git: `git init`
3. Add files: `git add .`
4. Commit: `git commit -m "Initial commit"`
5. Create a new repo on GitHub and add as remote:
   - `git remote add origin https://github.com/your-username/azure-agentic-copilot.git`
6. Push: `git push -u origin main`
7. Use GitHub for collaboration, code review, and backup.

---

---
This file serves as a high-level guide and reference for the Azure Copilot project.
